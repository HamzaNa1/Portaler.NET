@page "/"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazored.Typeahead
@using Portaler.NET.Client.Github
@using Portaler.NET.Client.Visualiser
@using Portaler.NET.Shared
@using Portaler.NET.Shared.GameInfo

@inject IJSRuntime _jsRuntime;
@inject HttpClient _http;
@inject Blazored.LocalStorage.ILocalStorageService _localStorage;


<PageTitle>Portaler.NET</PageTitle>

<img @ref="_homeImg" hidden src="assets/home.png"  alt=""/>


<div class="sidenav">
    <div class="obj">
        <text>From</text>
        <BlazoredTypeahead SearchMethod="SearchZones" @bind-Value="_selectedZoneFrom" Debounce="1">
            <SelectedTemplate>
                @context
            </SelectedTemplate>
            <ResultTemplate>
                @context
            </ResultTemplate>
        </BlazoredTypeahead>
    </div>

    <div class="obj">
        <text>To</text>
        <BlazoredTypeahead SearchMethod="SearchZones" @bind-Value="_selectedZoneTo" Debounce="1">
            <SelectedTemplate>
                @context
            </SelectedTemplate>
            <ResultTemplate>
                @context
            </ResultTemplate>
        </BlazoredTypeahead>
    </div>
    
    <br/>
    
    <div class="obj">
        <text>h</text>
        <input type="number" name="h" step="1" style="width: 50px" @bind-value="_h"/>
        <text style="margin-left: 10px">m</text>
        <input type="number" name="m" step="1" style="width: 50px" @bind-value="_m"/>
    </div>
        
    <div class="obj" style="overflow: hidden; white-space: nowrap">
        <button class="clrBtn" style="background-color: lightgreen; width: 30%" onclick="@SetGreen">2</button>
        <button class="clrBtn" style="background-color: cornflowerblue; width: 30%" onclick="@SetBlue">7</button>
        <button class="clrBtn" style="background-color: palegoldenrod; width: 30%" onclick="@SetGold">20</button>
    </div>

    <br/>
    
    <button class="obj button" style="width: 90%" onclick="@AddConnection">Add</button>
    <button class="obj button" style="width: 90%" onclick="@Delete">Delete</button>
    
    <div class="obj">
        <textarea readonly class="commitText" style="resize: none" @bind=@_lastCommitMessage></textarea>
    </div>
</div>

<div class="main">
    <div id="canvasContainer" style="position: fixed; opacity: 1; background-color: black; width: 100%; height: 100%">
        <BECanvas @ref="_canvas"/>
    </div>
</div>

@code
{
    BECanvasComponent? _canvas;
    Canvas2DContext? _context;

    ElementReference _homeImg;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        _context = await _canvas.CreateCanvas2DAsync();

        Drawer.HomeImage = _homeImg;
        
        await InitGame();
    }

    private async Task InitGame()
    {
        CanvasMeta? canvasMeta = await _jsRuntime.InvokeAsync<CanvasMeta>("initCanvas", DotNetObjectReference.Create(this));

        if (_canvas != null)
        {
            _canvas.Height = canvasMeta.Height;
            _canvas.Width = canvasMeta.Width;
        }

        await _jsRuntime.InvokeAsync<object>("gameWindowResize", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async ValueTask GameLoop()
    {
        if (_map is null || _context is null || _canvas is null)
        {
            return;
        }

        await _map.CheckConnections(_localStorage);
        if (_left && _selectedBall is not null)
        {
            _selectedBall.Position = new Vector2d(_mousePos.X, _mousePos.Y);
        }
        
        await _context.SetFillStyleAsync("rgb(112, 128, 144)");
        await _context.FillRectAsync(0, 0, _canvas.Width, _canvas.Height);
        await Drawer.DrawMap(_map, _selectedBall, _context, _canvas.Width, _canvas.Height);
    }

    [JSInvokable]
    public async ValueTask OnResize(int screenWidth, int screenHeight)
    {
        if (_canvas is null)
        {
            return;
        }

        _canvas.Width = screenWidth - 220;
        _canvas.Height = screenHeight;
    }

    private bool _left;
    private Ball? _selectedBall;
    [JSInvokable]
    public async ValueTask OnClick(string type, double x, double y)
    {
        if (_canvas is null)
        {
            return;
        }
        
        x -= 220;

        if (x < 0 || y < 0)
        {
            return;
        }

        x -= _canvas.Width / 2.0;
        y -= _canvas.Height / 2.0;
        
        if (type == "mousedown")
        {
            if (!_left)
            {
                _left = true;
                _selectedBall = _map?.GetBall(x, y);

                if (_selectedBall?.Zone != null)
                {
                    _selectedZoneFrom = _selectedBall.Zone.Name;
                    _selectedZoneTo = null;

                    _h = 0;
                    _m = 0;
                    
                    StateHasChanged();
                }
            }
        }
        else if (type == "mouseup")
        {
            _left = false;
        }
    }

    Vector2d _mousePos = Vector2d.Zero;
    [JSInvokable]
    public async Task OnMouseMove(double x, double y)
    {
        if (_canvas is null)
        {
            return;
        }
        
        x -= _canvas.Width / 2.0 + 220;
        y -= _canvas.Height / 2.0;

        _mousePos = new Vector2d(x, y);
    }

    private Map? _map;
    private string _lastCommitMessage = "";
    
    protected override async Task OnInitializedAsync()
    {
        new Config(0, 0.08f, 0.025f, 50f, 0.0000001f, 300, true).SetAsDefault();
        _map = new Map();

        await ZoneGenerator.Initialize();
        await _map.Load(_localStorage);
        
        await GithubHandler.GetLastCommitMessage(ChangeCommitMessage);
    }

    private async void ChangeCommitMessage(string newMessage)
    {
        _lastCommitMessage = newMessage;
        await _jsRuntime.InvokeAsync<bool>("ResetHeight", "commitText");
        await _jsRuntime.InvokeAsync<bool>("UpdateHeight", "commitText");
    }

    private async Task AddConnection()
    {
        if (_map is null || _selectedZoneFrom is null || _selectedZoneTo is null)
        {
            return;
        }
        
        ZoneInfo? fromZone = ZoneGenerator.GetZone(_selectedZoneFrom);
        ZoneInfo? toZone = ZoneGenerator.GetZone(_selectedZoneTo);

        if (fromZone is null || toZone is null)
        {
            return;
        }
        
        _map.AddConnection(fromZone, toZone, _connectionType, _h, _m);

        _selectedZoneTo = null;

        _h = 0;
        _m = 0;
    }

    private async Task Delete()
    {
        if (_map is null || _selectedBall is null)
        {
            return;
        }

        for (int i = 0; i < _map.Connections.Count; i++)
        {
            Connection c = _map.Connections[i];
            if (c.Start == _selectedBall || c.End == _selectedBall)
            {
                _map.RemoveConnection(c);
                
                await _map.Save(_localStorage);
            }
        }
    }

    private int _h = 0;
    private int _m = 0;
    
    private ConnectionType _connectionType;

    private void SetGreen()
    {
        _connectionType = ConnectionType.Green;
    }

    private void SetBlue()
    {
        _connectionType = ConnectionType.Blue;
    }

    private void SetGold()
    {
        _connectionType = ConnectionType.Gold;
    }

    private string? _selectedZoneTo;
    private string? _selectedZoneFrom;

    private async Task<IEnumerable<string>> SearchZones(string searchText)
    {
        if (ZoneGenerator.Zones is null)
        {
            return Array.Empty<string>();
        }

        return await Task.FromResult(ZoneGenerator.Zones.Select(x => x.Name).Where(x => x.ToLower().Contains(searchText.ToLower()) && x != _selectedZoneTo && x != _selectedZoneFrom).ToList());
    }

    // private string _ticketString = string.Empty;
    //
    // private async Task CheckAuthTicket()
    // {
    //     AuthTicket? ticket = await _http.GetFromJsonAsync<AuthTicket>("AuthTicket");
    //     if (ticket is null)
    //     {
    //         Console.WriteLine("Couldn't auth ticket, try again later.");
    //         return;
    //     }
    //
    //     if (ticket.Ticket == _ticketString)
    //     {
    //         await InitGame();
    //     }
    //     else
    //     {
    //         Console.WriteLine("Wrong Ticket");
    //     }
    // }

    public class CanvasMeta
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }
}